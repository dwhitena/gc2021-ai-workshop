// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BERTClient is the client API for BERT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BERTClient interface {
	// Sends a request to /answer.
	Answer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*AnswerReply, error)
	// Sends a request to /discriminate.
	Discriminate(ctx context.Context, in *DiscriminateRequest, opts ...grpc.CallOption) (*DiscriminateReply, error)
	// Sends a request to /predict.
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictReply, error)
	// Sends a request to /encode.
	Encode(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*EncodeReply, error)
	// Sends a request to /classify.
	Classify(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyReply, error)
}

type bERTClient struct {
	cc grpc.ClientConnInterface
}

func NewBERTClient(cc grpc.ClientConnInterface) BERTClient {
	return &bERTClient{cc}
}

func (c *bERTClient) Answer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*AnswerReply, error) {
	out := new(AnswerReply)
	err := c.cc.Invoke(ctx, "/bert.grpcapi.BERT/Answer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bERTClient) Discriminate(ctx context.Context, in *DiscriminateRequest, opts ...grpc.CallOption) (*DiscriminateReply, error) {
	out := new(DiscriminateReply)
	err := c.cc.Invoke(ctx, "/bert.grpcapi.BERT/Discriminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bERTClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictReply, error) {
	out := new(PredictReply)
	err := c.cc.Invoke(ctx, "/bert.grpcapi.BERT/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bERTClient) Encode(ctx context.Context, in *EncodeRequest, opts ...grpc.CallOption) (*EncodeReply, error) {
	out := new(EncodeReply)
	err := c.cc.Invoke(ctx, "/bert.grpcapi.BERT/Encode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bERTClient) Classify(ctx context.Context, in *ClassifyRequest, opts ...grpc.CallOption) (*ClassifyReply, error) {
	out := new(ClassifyReply)
	err := c.cc.Invoke(ctx, "/bert.grpcapi.BERT/Classify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BERTServer is the server API for BERT service.
// All implementations must embed UnimplementedBERTServer
// for forward compatibility
type BERTServer interface {
	// Sends a request to /answer.
	Answer(context.Context, *AnswerRequest) (*AnswerReply, error)
	// Sends a request to /discriminate.
	Discriminate(context.Context, *DiscriminateRequest) (*DiscriminateReply, error)
	// Sends a request to /predict.
	Predict(context.Context, *PredictRequest) (*PredictReply, error)
	// Sends a request to /encode.
	Encode(context.Context, *EncodeRequest) (*EncodeReply, error)
	// Sends a request to /classify.
	Classify(context.Context, *ClassifyRequest) (*ClassifyReply, error)
	mustEmbedUnimplementedBERTServer()
}

// UnimplementedBERTServer must be embedded to have forward compatible implementations.
type UnimplementedBERTServer struct {
}

func (UnimplementedBERTServer) Answer(context.Context, *AnswerRequest) (*AnswerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Answer not implemented")
}
func (UnimplementedBERTServer) Discriminate(context.Context, *DiscriminateRequest) (*DiscriminateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discriminate not implemented")
}
func (UnimplementedBERTServer) Predict(context.Context, *PredictRequest) (*PredictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedBERTServer) Encode(context.Context, *EncodeRequest) (*EncodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encode not implemented")
}
func (UnimplementedBERTServer) Classify(context.Context, *ClassifyRequest) (*ClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Classify not implemented")
}
func (UnimplementedBERTServer) mustEmbedUnimplementedBERTServer() {}

// UnsafeBERTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BERTServer will
// result in compilation errors.
type UnsafeBERTServer interface {
	mustEmbedUnimplementedBERTServer()
}

func RegisterBERTServer(s grpc.ServiceRegistrar, srv BERTServer) {
	s.RegisterService(&BERT_ServiceDesc, srv)
}

func _BERT_Answer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BERTServer).Answer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bert.grpcapi.BERT/Answer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BERTServer).Answer(ctx, req.(*AnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BERT_Discriminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscriminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BERTServer).Discriminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bert.grpcapi.BERT/Discriminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BERTServer).Discriminate(ctx, req.(*DiscriminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BERT_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BERTServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bert.grpcapi.BERT/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BERTServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BERT_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BERTServer).Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bert.grpcapi.BERT/Encode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BERTServer).Encode(ctx, req.(*EncodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BERT_Classify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BERTServer).Classify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bert.grpcapi.BERT/Classify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BERTServer).Classify(ctx, req.(*ClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BERT_ServiceDesc is the grpc.ServiceDesc for BERT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BERT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bert.grpcapi.BERT",
	HandlerType: (*BERTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Answer",
			Handler:    _BERT_Answer_Handler,
		},
		{
			MethodName: "Discriminate",
			Handler:    _BERT_Discriminate_Handler,
		},
		{
			MethodName: "Predict",
			Handler:    _BERT_Predict_Handler,
		},
		{
			MethodName: "Encode",
			Handler:    _BERT_Encode_Handler,
		},
		{
			MethodName: "Classify",
			Handler:    _BERT_Classify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bert.proto",
}
