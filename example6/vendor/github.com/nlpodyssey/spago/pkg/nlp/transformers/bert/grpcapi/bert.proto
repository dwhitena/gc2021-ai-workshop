syntax = "proto3";

package bert.grpcapi;

option go_package = "github.com/nlpodyssey/spago/pkg/nlp/transformers/bert/grpcapi";

// The BERT service definition.
service BERT {
  // Sends a request to /answer.
  rpc Answer(AnswerRequest) returns (AnswerReply) {}

  // Sends a request to /discriminate.
  rpc Discriminate (DiscriminateRequest) returns (DiscriminateReply) {}

  // Sends a request to /predict.
  rpc Predict (PredictRequest) returns (PredictReply) {}

  // Sends a request to /encode.
  rpc Encode (EncodeRequest) returns (EncodeReply) {}

  // Sends a request to /classify.
  rpc Classify(ClassifyRequest) returns (ClassifyReply) {}
}

// The answer request message containing the passage and question to answer.
message AnswerRequest {
  string passage  = 1;
  string question = 2;
}

// The response message containing the answers.
message Answer {
  string text       = 1;
	int32  start      = 2;
	int32  end        = 3;
	double confidence = 4;
}
message AnswerReply {
  repeated Answer answers = 1;

  // Took is the number of milliseconds it took the server to execute the request.
	int64          took     = 2;
}

// The discriminate request message containing the text.
message DiscriminateRequest {
  string text = 1;
}

// The response message containing the tokens from discriminate analysis.
message Token {
  string text  = 1;
	int32  start = 2;
	int32  end   = 3;
	string label = 4;
}
message DiscriminateReply {
  repeated Token tokens = 1;

  // Took is the number of milliseconds it took the server to execute the request.
	int64          took   = 2;
}

// The predict request message containing the text.
message PredictRequest {
  string text = 1;
}

// The response message containing the tokens from BERT prediction.
message PredictReply {
  repeated Token tokens = 1;

  // Took is the number of milliseconds it took the server to execute the request.
  int64          took = 2;
}

// The encode request message containing the text.
message EncodeRequest {
  enum PoolingStrategy {
    // get the encoding state corresponding to [CLS], i.e. the first token (default)
    CLS_TOKEN = 0;
    // take the average of the encoding states
    REDUCE_MEAN = 1;
    //  take the maximum of the encoding states
    REDUCE_MAX = 2;
    // do REDUCE_MEAN and REDUCE_MAX separately and then concat them together
    REDUCE_MEAN_MAX = 3;
  }

  string text = 1;
  PoolingStrategy pooling_strategy = 2;
}

// The response message containing the tokens from BERT prediction.
message EncodeReply {
  repeated float vector = 1;

  // Took is the number of milliseconds it took the server to execute the request.
  int64          took = 2;
}

// The classify request message containing the text to classify
message ClassifyRequest {
  bool has_text2 = 1;  // always set this to "true" when using text2
  string text = 2;
  string text2 = 3;
}

// The response message containing the classification.
message ClassConfidencePair {
  string class = 1;
  double confidence = 2;
}

message ClassifyReply {
  string class = 1;
  double confidence = 2;
  repeated ClassConfidencePair distribution = 3;

  // Took is the number of milliseconds it took the server to execute the request.
  int64 took = 4;
}
